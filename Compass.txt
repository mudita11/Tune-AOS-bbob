
#name			switch		     type		values						[conditions (using R syntax)]
FF			"--FF "			r		(0.1, 2.0)
CR             		"--CR "         	r  		(0.1, 1.0)
NP			"--NP "              	c	        (50, 400)

# MANUEL: what is maxgen?
# MUDITA: Last maximum number of generations to extract data for an operator

# Jorge Maturana and Fred´ eric Saubion. “A compass ´
to guide genetic algorithms”. In: International Conference on Parallel Problem Solving from Nature. http: / /
www. info . univ - angers . fr / pub / maturana / files /
MaturanaSaubion - Compass - PPSNX . pdf. Springer.
2008, pp. 256–265.

OM_choice		"--OM_choice "		c		(2)
rew_choice		"--rew_choice "		c		(2)
qual_choice		"--qual_choice "	c		(2)
prob_choice		"--prob_choice "	c		(0)
select_choice		"--select_choice "	c		(0)
fix_appl		"--fix_appl "		c		(50, 100, 150)					| rew_choice %in% c(0, 1, 2)
max_gen			"--max_gen "		c		(1, 15, 30, 50)					| rew_choice %in% c(5, 7, 9, 11)
theta			"--theta "		c		(36, 45, 54, 90)				| rew_choice == 2
window_size		"--window_size "	c		(20, 50)					| rew_choice %in% c(3, 4, 8)
decay			"--decay "		r		(0.0, 1.0)					| rew_choice %in% c(3, 4)
succ_lin_quad		"--succ_lin_quad "	c		(0, 1)						| rew_choice == 5
frac			"--frac "		r		(0.0, 1.0)					| rew_choice == 5
noise			"--noise "		r		(0.0, 1.0)					| rew_choice == 5
normal_factor		"--normal_factor "	c		(0, 1)						| rew_choice == 8
scaling_constant	"--scaling_constant "	r		(0.0, 1.0)					| rew_choice == 10
alpha			"--alpha "		c		(0, 1)						| rew_choice %in% c(10, 11)
beta			"--beta "		c		(0, 1)						| rew_choice == 10
# choice4			"--choice4 "		c		(0, 1)						| rew_choice == 11
intensity		"--intensity "		r		(0.0, 1.0)					| rew_choice == 11
# adaptation_rate		"--adaptation_rate "	r		(0.0, 1.0)					| qual_choice == 0
scaling_factor		"--scaling_factor "	r		(0.0, 1.0)					| qual_choice == 1
decay_rate		"--decay_rate "		r		(0.0, 1.0)					| qual_choice %in% c(0, 3)
weight_reward		"--weight_reward "	r		(0.0, 1.0)					| qual_choice == 4
weight_old_reward	"--weight_old_reward "	r		(0.0, 1.0)					| qual_choice == 4
discount_rate		"--discount_rate "	r		(0.0, 1.0)					| qual_choice == 4
p_min			"--p_min "		r		(0.0, 0.25)					| prob_choice %in% c(0, 1, 2)
learning_rate		"--learning_rate "	r		(0.0, 1.0)					| prob_choice %in% c(1, 2)
error_prob		"--error_prob "		r		(0.0, 1.0)					| prob_choice == 0
p_max			"--p_max "		r		(0.0, 1.0)					| prob_choice == 1

